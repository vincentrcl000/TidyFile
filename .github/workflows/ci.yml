name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8 mypy
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports .
    
    - name: Test with pytest
      run: |
        # 创建简单的测试文件
        mkdir -p tests
        echo "def test_dummy(): pass" > tests/test_dummy.py
        pytest tests/ -v

  build:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      if: github.event_name == 'push'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  build-executables:
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create resources directory
      run: |
        mkdir -p resources
        # 如果没有图标文件，创建一个简单的占位符
        if (!(Test-Path "resources/TidyFile.ico")) {
          echo "Creating placeholder icon"
          New-Item -ItemType File -Path "resources/TidyFile.ico" -Force
        }
        if (!(Test-Path "resources/Article_Reader.ico")) {
          echo "Creating placeholder icon"
          New-Item -ItemType File -Path "resources/Article_Reader.ico" -Force
        }
    
    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name=TidyFile-Windows-x64 --icon=resources/TidyFile.ico --add-data=resources;resources --paths=src --hidden-import=tkinter --hidden-import=ttkbootstrap --hidden-import=flask --hidden-import=requests --hidden-import=PIL --hidden-import=PyPDF2 --hidden-import=docx --clean main.py
    
    - name: Create distribution packages
      run: |
        # 创建ZIP包
        cd dist
        powershell Compress-Archive -Path "TidyFile-Windows-x64.exe" -DestinationPath "TidyFile-Windows-x64.zip"
        
        # 创建安装包
        mkdir TidyFile-Installer
        copy TidyFile-Windows-x64.exe TidyFile-Installer\
        copy ..\scripts\start_tidyfile.vbs TidyFile-Installer\
        copy ..\scripts\start_article_reader.vbs TidyFile-Installer\
        copy ..\scripts\create_desktop_shortcuts.py TidyFile-Installer\
        xcopy ..\resources TidyFile-Installer\resources /E /I /Y
        
        # 创建安装说明
        echo # TidyFile Windows 安装包 > TidyFile-Installer\README.txt
        echo. >> TidyFile-Installer\README.txt
        echo ## 安装说明 >> TidyFile-Installer\README.txt
        echo. >> TidyFile-Installer\README.txt
        echo 1. 解压此文件夹到任意位置 >> TidyFile-Installer\README.txt
        echo 2. 运行 create_desktop_shortcuts.py 创建桌面快捷方式 >> TidyFile-Installer\README.txt
        echo 3. 双击桌面上的 "TidyFile" 或 "Article Reader" 图标启动程序 >> TidyFile-Installer\README.txt
        echo. >> TidyFile-Installer\README.txt
        echo ## 注意事项 >> TidyFile-Installer\README.txt
        echo - 首次运行可能需要配置AI模型 >> TidyFile-Installer\README.txt
        echo - 推荐使用Ollama本地模型 >> TidyFile-Installer\README.txt
        echo - 详细使用说明请参考用户手册 >> TidyFile-Installer\README.txt
        
        # 创建安装包ZIP
        powershell Compress-Archive -Path "TidyFile-Installer\*" -DestinationPath "TidyFile-Windows-Installer.zip"
        cd ..
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: TidyFile-Windows-x64
        path: |
          dist/TidyFile-Windows-x64.exe
          dist/TidyFile-Windows-x64.zip
          dist/TidyFile-Windows-Installer.zip

  release:
    needs: [build, build-executables]
    runs-on: windows-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release assets
      run: |
        mkdir -p release-assets
        # 移动所有可执行文件到发布目录
        Get-ChildItem -Recurse -Name "TidyFile-Windows-x64*" | ForEach-Object { Copy-Item $_ "release-assets/" }
        # 创建发布说明
        echo # TidyFile v${{ github.event.release.tag_name }} > release-assets/README.md
        echo. >> release-assets/README.md
        echo ## 下载说明 >> release-assets/README.md
        echo. >> release-assets/README.md
        echo ### Windows 用户 >> release-assets/README.md
        echo - 下载 \`TidyFile-Windows-x64.exe\` 直接运行 >> release-assets/README.md
        echo - 或下载 \`TidyFile-Windows-x64.zip\` 解压使用 >> release-assets/README.md
        echo - 或下载 \`TidyFile-Windows-Installer.zip\` 完整安装包 >> release-assets/README.md
        echo. >> release-assets/README.md
        echo ### 安装说明 >> release-assets/README.md
        echo 1. 下载对应文件 >> release-assets/README.md
        echo 2. 解压或直接运行 >> release-assets/README.md
        echo 3. 配置AI模型（推荐使用Ollama） >> release-assets/README.md
        echo 4. 开始使用！ >> release-assets/README.md
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-assets/${{ matrix.name }}
        asset_name: ${{ matrix.name }}
        asset_content_type: application/octet-stream
      strategy:
        matrix:
          include:
            - name: TidyFile-Windows-x64.exe
            - name: TidyFile-Windows-x64.zip
            - name: TidyFile-Windows-Installer.zip
            - name: README.md 