#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
模拟实际分类过程，找出问题所在
"""
import os
import sys
import json
from pathlib import Path

# 添加当前目录到Python路径
sys.path.insert(0, str(Path(__file__).parent))

from file_organizer_ai import FileOrganizer

def simulate_real_classification():
    """模拟实际的分类过程"""
    print("=== 模拟实际分类过程 ===")
    
    # 初始化文件整理器
    organizer = FileOrganizer()
    
    # 模拟实际的文件分类过程
    test_cases = [
        {
            "name": "化工行业投资策略报告",
            "content": "华创证券化工行业2018年度投资策略：中国制造，全球龙头。本报告分析了中国化工行业在全球市场中的竞争力和发展趋势。",
            "summary": "该文件为华创证券化工行业2018年度投资策略报告，重点分析中国制造在全球化工行业的竞争力与发展趋势。",
            "ai_recommendations": [
                "【16】合作项目资料\\养老",
                "【06】行业研究分类\\【6】医疗保健\\【6-4】药材及制药\\创新药", 
                "【06】行业研究分类\\【7】金融\\【7-4】保险\\【7-4-8】保险资管\\【7-4-8-3】投资理念"
            ]
        },
        {
            "name": "谷子经济报告",
            "content": "本报告围绕谷子经济展开，分析其产业链结构及投资机遇。谷子经济指基于动画、漫画、游戏等内容IP衍生的周边商品经济形态。",
            "summary": "该报告分析了二次元文化衍生的谷子经济产业链及投资机遇。",
            "ai_recommendations": [
                "【06】行业研究分类\\【7】金融\\【7-4】保险\\【7-4-8】保险资管\\【7-4-8-3】投资理念",
                "【16】合作项目资料\\基金\\麦盛基金档案\\C.深圳麦盛参与基金列表\\基础设施建设基金\\前海挂靠",
                "【06】行业研究分类\\【6】医疗保健\\【6-4】药材及制药\\创新药"
            ]
        }
    ]
    
    for test_case in test_cases:
        print(f"\n{'='*80}")
        print(f"📄 测试文件: {test_case['name']}")
        print(f"📝 文件摘要: {test_case['summary']}")
        print(f"🤖 AI推荐路径: {test_case['ai_recommendations']}")
        
        # 模拟相关性过滤过程
        print(f"\n🔍 开始相关性分析和排序...")
        filtered_paths = organizer._filter_irrelevant_folders(
            test_case['content'], 
            test_case['summary'], 
            test_case['ai_recommendations'], 
            "test_directory"
        )
        
        print(f"✅ 过滤后的路径: {filtered_paths}")
        
        # 模拟路径验证过程
        print(f"\n🔍 开始路径验证...")
        if not filtered_paths:
            print(f"⚠️ 相关性过滤后无有效路径，拒绝分类")
            print(f"🎯 最终结果: 拒绝分类")
        else:
            for i, path in enumerate(filtered_paths, 1):
                print(f"🔍 验证第{i}个路径: {path}")
                
                # 模拟路径存在性检查
                if "养老" in path or "医疗" in path or "保险" in path:
                    print(f"❌ 路径不存在或不相符: {path}")
                    continue
                else:
                    print(f"✅ 路径有效: {path}")
                    print(f"🎯 最终选择: {path}")
                    break
            else:
                print(f"⚠️ 所有路径都无效，拒绝分类")
                print(f"🎯 最终结果: 拒绝分类")

def analyze_ai_prompt():
    """分析AI提示词是否合理"""
    print(f"\n{'='*80}")
    print("=== 分析AI提示词 ===")
    
    # 模拟AI提示词
    prompt = """你是一个专业的保险行业文件分类专家。请根据文件内容精确分类到最合适的目标文件夹。

文件信息：
- 文件名：化工行业投资策略报告
- 内容摘要：华创证券化工行业2018年度投资策略报告，重点分析中国制造在全球化工行业的竞争力与发展趋势。

可选的目标文件夹路径（必须严格从以下列表中选择，不能修改路径）：
【7-4-1】综合
【7-4-5】人身险
【7-4-6】财产险
【7-4-7】再保险
【7-4-8】保险资管
【7-4-9】保险中介
【7-4-10】新兴业态
【16】合作项目资料\\养老
【06】行业研究分类\\【6】医疗保健\\【6-4】药材及制药\\创新药

保险行业分类指导原则：
1. **人身险类**：寿险、健康险、意外险、年金险等相关文档 → 【7-4-5】人身险
2. **财产险类**：车险、家财险、责任险、工程险等相关文档 → 【7-4-6】财产险
3. **再保险类**：再保险业务、分保、风险分散等相关文档 → 【7-4-7】再保险
4. **保险资管类**：投资管理、资产管理、资金运用等相关文档 → 【7-4-8】保险资管
5. **保险中介类**：代理、经纪、公估等相关文档 → 【7-4-9】保险中介
6. **新兴业态类**：互联网保险、科技保险、创新业务等相关文档 → 【7-4-10】新兴业态
7. **监管政策类**：保监会政策、监管规定、合规要求等相关文档 → 【7-4-2】保监会
8. **公司经营类**：公司管理、经营策略、市场分析等相关文档 → 【7-4-1】综合
9. **保险公司类**：具体保险公司相关文档 → 【7-4-4】保险公司

分类要求：
1. 必须严格从上述文件夹路径列表中复制完整的路径
2. 不能修改、缩写或添加任何内容到路径
3. 不能创建或想象不存在的文件夹
4. 优先选择最具体的分类，避免选择过于宽泛的"综合"类
5. 按匹配度从高到低返回前三个路径
6. 每行一个路径，不要包含任何其他内容
7. 不要使用"<think>"标签或任何思考过程描述
8. 仔细分析文件内容主题，选择最匹配的专业分类
9. 优先参考用户自定义分类规则进行判断

输出格式（严格按此格式，每行一个完整路径）：
第一推荐：[完整路径1]
第二推荐：[完整路径2]
第三推荐：[完整路径3]

请开始推荐："""

    print(f"🤖 AI提示词分析:")
    print(f"📋 提示词长度: {len(prompt)} 字符")
    print(f"🔍 关键问题:")
    print(f"  1. 提示词中包含了不相关的路径（如养老、医疗等）")
    print(f"  2. AI可能会选择这些不相关的路径")
    print(f"  3. 相关性过滤应该能处理这个问题，但前提是AI推荐了错误的路径")

def suggest_improvements():
    """建议改进方案"""
    print(f"\n{'='*80}")
    print("=== 改进建议 ===")
    
    print(f"🔧 问题分析:")
    print(f"  1. AI推荐了不相关的路径（养老、医疗、保险资管等）")
    print(f"  2. 相关性过滤功能正常，但AI推荐本身就错误")
    print(f"  3. 需要改进AI提示词，避免推荐不相关的路径")
    
    print(f"\n💡 改进方案:")
    print(f"  1. 在AI提示词中明确排除不相关的路径")
    print(f"  2. 增强相关性过滤的权重，确保错误路径被排除")
    print(f"  3. 添加更多的相斥性检查规则")
    print(f"  4. 改进路径长度权重算法")

if __name__ == "__main__":
    simulate_real_classification()
    analyze_ai_prompt()
    suggest_improvements() 